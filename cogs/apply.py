import disnake
from disnake.ext import commands
import os
from dotenv import load_dotenv
import datetime

load_dotenv()

class ApplicationButtons(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=disnake.ButtonStyle.green, custom_id="accept_application")
    async def accept_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        try:
            if not inter.message.embeds:
                if not inter.response.is_done():
                    await inter.response.send_message("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç embed.", ephemeral=True)
                return

            # Get the original embed
            original_embed = inter.message.embeds[0]
            
            # Create new embed with acceptance status
            embed = disnake.Embed(
                title=original_embed.title,
                description=original_embed.description,
                color=disnake.Color.green(),
                timestamp=original_embed.timestamp
            )
            
            # Copy all fields from original embed
            for field in original_embed.fields:
                embed.add_field(
                    name=field.name,
                    value=field.value,
                    inline=field.inline
                )
            
            # Add acceptance information
            embed.add_field(
                name="–°—Ç–∞—Ç—É—Å",
                value=f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ {inter.author.mention}",
                inline=False
            )
            
            # Update the message
            await inter.message.edit(embed=embed, view=None)
            
            # Get the applicant
            try:
                applicant_mention = original_embed.fields[-1].value  # Last field is applicant info
                applicant_id = int(applicant_mention.replace("<@", "").replace(">", ""))
                applicant = inter.guild.get_member(applicant_id)
                
                if applicant:
                    # Send DM to applicant
                    try:
                        await applicant.send(
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ {inter.author.mention}!\n"
                            f"–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
                        )
                    except disnake.Forbidden:
                        pass  # If we can't send DM, just continue
            except (ValueError, IndexError):
                pass  # If we can't get applicant info, just continue
            
            # Send to logs channel
            try:
                logs_channel_id = int(os.getenv("APPLICATION_LOGS_CHANNEL_ID", 0))
                if logs_channel_id:
                    logs_channel = inter.guild.get_channel(logs_channel_id)
                    if logs_channel:
                        await logs_channel.send(embed=embed)
            except (ValueError, AttributeError):
                pass  # If we can't send to logs, just continue
            
            if not inter.response.is_done():
                await inter.response.send_message(
                    "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!",
                    ephemeral=True
                )
        except Exception as e:
            if not inter.response.is_done():
                await inter.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                    ephemeral=True
                )

    @disnake.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=disnake.ButtonStyle.red, custom_id="reject_application")
    async def reject_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        try:
            if not inter.message.embeds:
                if not inter.response.is_done():
                    await inter.response.send_message("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç embed.", ephemeral=True)
                return

            # Get the original embed
            original_embed = inter.message.embeds[0]
            
            # Create new embed with rejection status
            embed = disnake.Embed(
                title=original_embed.title,
                description=original_embed.description,
                color=disnake.Color.red(),
                timestamp=original_embed.timestamp
            )
            
            # Copy all fields from original embed
            for field in original_embed.fields:
                embed.add_field(
                    name=field.name,
                    value=field.value,
                    inline=field.inline
                )
            
            # Add rejection information
            embed.add_field(
                name="–°—Ç–∞—Ç—É—Å",
                value=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {inter.author.mention}",
                inline=False
            )
            
            # Update the message
            await inter.message.edit(embed=embed, view=None)
            
            # Get the applicant
            try:
                applicant_mention = original_embed.fields[-1].value  # Last field is applicant info
                applicant_id = int(applicant_mention.replace("<@", "").replace(">", ""))
                applicant = inter.guild.get_member(applicant_id)
                
                if applicant:
                    # Send DM to applicant
                    try:
                        await applicant.send(
                            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {inter.author.mention}.\n"
                            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π."
                        )
                    except disnake.Forbidden:
                        pass  # If we can't send DM, just continue
            except (ValueError, IndexError):
                pass  # If we can't get applicant info, just continue
            
            # Send to logs channel
            try:
                logs_channel_id = int(os.getenv("APPLICATION_LOGS_CHANNEL_ID", 0))
                if logs_channel_id:
                    logs_channel = inter.guild.get_channel(logs_channel_id)
                    if logs_channel:
                        await logs_channel.send(embed=embed)
            except (ValueError, AttributeError):
                pass  # If we can't send to logs, just continue
            
            if not inter.response.is_done():
                await inter.response.send_message(
                    "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
                    ephemeral=True
                )
        except Exception as e:
            if not inter.response.is_done():
                await inter.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                    ephemeral=True
                )

class ApplySelect(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
                label="Media",
                description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å Media",
                value="media",
                emoji="üì∑"
            ),
            disnake.SelectOption(
                label="PR Manager",
                description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å PR Manager",
                value="pr_manager",
                emoji="üì¢"
            )
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="apply_select"
        )

    async def callback(self, inter: disnake.MessageInteraction):
        try:
            if not inter.values:
                if not inter.response.is_done():
                    await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏.", ephemeral=True)
                return

            # Create modal based on selected category
            if inter.values[0] == "media":
                modal = MediaApplyModal()
            else:
                modal = PRManagerApplyModal()
            
            await inter.response.send_modal(modal)
        except Exception as e:
            if not inter.response.is_done():
                await inter.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )

class SupportApplyModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="üë§ –í–∞—à–µ –∏–º—è",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º",
                custom_id="name",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üéÇ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
                custom_id="age",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=3
            ),
            disnake.ui.TextInput(
                label="‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                placeholder="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?",
                custom_id="time",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                custom_id="timezone",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üí¨ –û —Å–µ–±–µ",
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –ø–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã",
                custom_id="about",
                style=disnake.TextInputStyle.paragraph,
                required=True,
                max_length=1000
            )
        ]
        super().__init__(
            title="üéÆ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å —Å–∞–ø–ø–æ—Ä—Ç–∞",
            custom_id="support_apply",
            components=components
        )

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            # Get the applications channel
            channel_id = int(os.getenv("APPLICATIONS_CHANNEL_ID", 0))
            channel = inter.guild.get_channel(channel_id)
            
            if not channel:
                await inter.response.send_message(
                    "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return

            # Create embed for the application
            embed = disnake.Embed(
                title="üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å —Å–∞–ø–ø–æ—Ä—Ç–∞",
                description="–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.",
                color=disnake.Color.blue(),
                timestamp=inter.created_at
            )
            
            # Add basic information
            embed.add_field(
                name="üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value=inter.text_values["name"],
                inline=False
            )
            
            # Add age
            embed.add_field(
                name="üéÇ –í–æ–∑—Ä–∞—Å—Ç",
                value=inter.text_values["age"],
                inline=False
            )
            
            # Add time
            embed.add_field(
                name="‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                value=inter.text_values["time"],
                inline=False
            )
            
            # Add timezone
            embed.add_field(
                name="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                value=inter.text_values["timezone"],
                inline=False
            )
            
            # Add about
            embed.add_field(
                name="üí¨ –û —Å–µ–±–µ",
                value=inter.text_values["about"],
                inline=False
            )
            
            # Add applicant info
            embed.add_field(
                name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å",
                value=inter.author.mention,
                inline=False
            )
            
            # Create view with buttons
            view = ApplicationButtons()
            
            # Send application to the channel
            await channel.send(embed=embed, view=view)
            
            await inter.response.send_message(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                ephemeral=True
            )
        except Exception as e:
            await inter.response.send_message(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )

class MediaApplyModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="üë§ –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @username",
                custom_id="name",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üéÇ –í–æ–∑—Ä–∞—Å—Ç",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25",
                custom_id="age",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=3
            ),
            disnake.ui.TextInput(
                label="üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: YouTube, TikTok, Instagram",
                custom_id="platforms",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=200
            ),
            disnake.ui.TextInput(
                label="üåê –Ø–∑—ã–∫–∏",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                custom_id="languages",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=200
            ),
            disnake.ui.TextInput(
                label="üõ°Ô∏è –†–∞–±–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–æ–º",
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–≥–∞—Ç–∏–≤–æ–º",
                custom_id="negativity",
                style=disnake.TextInputStyle.paragraph,
                required=True,
                max_length=1000
            )
        ]
        super().__init__(
            title="üé• –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –º–µ–¥–∏–∞–º–µ–π–∫–µ—Ä–∞",
            custom_id="media_apply",
            components=components
        )

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            # Get the applications channel
            channel_id = int(os.getenv("APPLICATIONS_CHANNEL_ID", 0))
            channel = inter.guild.get_channel(channel_id)
            
            if not channel:
                await inter.response.send_message(
                    "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return

            # Create embed for the application
            embed = disnake.Embed(
                title="üé• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –º–µ–¥–∏–∞–º–µ–π–∫–µ—Ä–∞",
                description="–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–æ–ª–∏ –º–µ–¥–∏–∞–º–µ–π–∫–µ—Ä–∞ (YouTuber, TikToker –∏ —Ç.–¥.), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.",
                color=disnake.Color.blue(),
                timestamp=inter.created_at
            )
            
            # Add name
            embed.add_field(
                name="üë§ –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)",
                value=inter.text_values["name"],
                inline=False
            )
            
            # Add age
            embed.add_field(
                name="üéÇ –í–æ–∑—Ä–∞—Å—Ç",
                value=inter.text_values["age"],
                inline=False
            )
            
            # Add platforms
            embed.add_field(
                name="üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                value=inter.text_values["platforms"],
                inline=False
            )
            
            # Add languages
            embed.add_field(
                name="üåê –Ø–∑—ã–∫–∏",
                value=inter.text_values["languages"],
                inline=False
            )
            
            # Add negativity handling
            embed.add_field(
                name="üõ°Ô∏è –†–∞–±–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–æ–º",
                value=inter.text_values["negativity"],
                inline=False
            )
            
            # Add applicant info
            embed.add_field(
                name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å",
                value=inter.author.mention,
                inline=False
            )
            
            # Create view with buttons
            view = ApplicationButtons()
            
            # Send application to the channel
            await channel.send(embed=embed, view=view)
            
            await inter.response.send_message(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                ephemeral=True
            )
        except Exception as e:
            await inter.response.send_message(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )

class PRManagerApplyModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="üë§ –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @username",
                custom_id="name",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üéÇ –í–æ–∑—Ä–∞—Å—Ç",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 16",
                custom_id="age",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=3
            ),
            disnake.ui.TextInput(
                label="‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                placeholder="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?",
                custom_id="time",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: GMT+3 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)",
                custom_id="timezone",
                style=disnake.TextInputStyle.short,
                required=True,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="ü§ù –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤?",
                custom_id="motivation",
                style=disnake.TextInputStyle.paragraph,
                required=True,
                max_length=1000
            )
        ]
        super().__init__(
            title="üì¢ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            custom_id="pr_manager_apply",
            components=components
        )

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            # Get the applications channel
            channel_id = int(os.getenv("APPLICATIONS_CHANNEL_ID", 0))
            channel = inter.guild.get_channel(channel_id)
            
            if not channel:
                await inter.response.send_message(
                    "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return

            # Create embed for the application
            embed = disnake.Embed(
                title="üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                description="–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–æ–ª–∏ –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.",
                color=disnake.Color.blue(),
                timestamp=inter.created_at
            )
            
            # Add name
            embed.add_field(
                name="üë§ –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)",
                value=inter.text_values["name"],
                inline=False
            )
            
            # Add age
            embed.add_field(
                name="üéÇ –í–æ–∑—Ä–∞—Å—Ç",
                value=inter.text_values["age"],
                inline=False
            )
            
            # Add time
            embed.add_field(
                name="‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                value=inter.text_values["time"],
                inline=False
            )
            
            # Add timezone
            embed.add_field(
                name="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                value=inter.text_values["timezone"],
                inline=False
            )
            
            # Add motivation
            embed.add_field(
                name="ü§ù –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                value=inter.text_values["motivation"],
                inline=False
            )
            
            # Add applicant info
            embed.add_field(
                name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å",
                value=inter.author.mention,
                inline=False
            )
            
            # Create view with buttons
            view = ApplicationButtons()
            
            # Send application to the channel
            await channel.send(embed=embed, view=view)
            
            await inter.response.send_message(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                ephemeral=True
            )
        except Exception as e:
            await inter.response.send_message(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )

class ApplyView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(ApplySelect())

class Apply(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views_added = False

    async def cog_load(self):
        try:
            # Add persistent views when the cog is loaded
            if not self.persistent_views_added:
                self.bot.add_view(ApplyView())
                self.bot.add_view(ApplicationButtons())
                self.persistent_views_added = True
                print("Persistent views added successfully")
        except Exception as e:
            print(f"Error adding persistent views: {str(e)}")

    @commands.slash_command(
        name="setup_apply",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞—è–≤–æ–∫",
        default_member_permissions=disnake.Permissions(administrator=True)
    )
    async def setup_apply(self, inter: disnake.ApplicationCommandInteraction):
        try:
            # Check if the channel is set up
            channel_id = int(os.getenv("APPLICATIONS_CHANNEL_ID", 0))
            if not channel_id:
                await inter.response.send_message(
                    "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è APPLICATIONS_CHANNEL_ID.",
                    ephemeral=True
                )
                return

            # Create the embed
            embed = disnake.Embed(
                title="„Ö§HALLCLOUD",
                description="""üé• –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –º–µ–¥–∏–∞–º–µ–π–∫–µ—Ä–∞
–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–æ–ª–∏ –º–µ–¥–∏–∞–º–µ–π–∫–µ—Ä–∞ (YouTuber, TikToker –∏ —Ç.–¥.), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.

üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
1. –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º):

2. –í–æ–∑—Ä–∞—Å—Ç:

üìà –ù–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç

3. –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç:
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≥–¥–µ –≤—ã –∞–∫—Ç–∏–≤–Ω—ã.

4. –Ø–∑—ã–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ:

üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏–¥–µ–∏
5. –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∫—Ä–∏—Ç–∏–∫–æ–π?
–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–µ–≥–∞—Ç–∏–≤–æ–º. 
HALLCLOUD

üì¢ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–æ–ª–∏ –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.

üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
1. –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º):
–ü—Ä–∏–º–µ—Ä: @username

2. –í–æ–∑—Ä–∞—Å—Ç:
–ü—Ä–∏–º–µ—Ä: 16

3. –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ:

4. –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:
–ü—Ä–∏–º–µ—Ä: GMT+3 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)

---

ü§ù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
5. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤?
–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º.""",
                color=0x0047df
            )
            
            # Create and add the view
            view = ApplyView()
            
            # Send the message
            await inter.channel.send(embed=embed, view=view)
            
            # Send confirmation
            await inter.response.send_message(
                "–ü–∞–Ω–µ–ª—å –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                ephemeral=True
            )
        except Exception as e:
            if not inter.response.is_done():
                await inter.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫: {str(e)}",
                    ephemeral=True
                )

    @commands.Cog.listener()
    async def on_select(self, inter: disnake.MessageInteraction):
        try:
            if inter.component.custom_id == "apply_select":
                if not inter.values:
                    if not inter.response.is_done():
                        await inter.response.send_message("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏.", ephemeral=True)
                    return

                # Create modal based on selected category
                if inter.values[0] == "media":
                    modal = MediaApplyModal()
                else:
                    modal = PRManagerApplyModal()
                
                await inter.response.send_modal(modal)
        except Exception as e:
            if not inter.response.is_done():
                await inter.response.send_message(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )

def setup(bot):
    bot.add_cog(Apply(bot))